<?xml version = "1.0" encoding = "UTF-8"?>
<!--Generated by Turbo XML 2.3.1.100. Conforms to w3c http://www.w3.org/2001/XMLSchema-->
<xsd:schema xmlns:xsd = "http://www.w3.org/2001/XMLSchema"
	 elementFormDefault = "qualified">
	<!-- First attempt at creating a schema for kit definitions. 
     The goal of this is to be able to automatically generate
     the Inca testing configuration utilizing information
     from kit registrations and these kit definitions -->
	
  <!-- A kit contains one or more packages or services -->
	<xsd:element name = "kit">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "service" minOccurs = "0" maxOccurs = "unbounded"/>
				<xsd:element ref = "package" minOccurs = "0" maxOccurs = "unbounded"/>
			</xsd:sequence>
      <!-- kit name -->
			<xsd:attribute name = "name" type = "xsd:string"/>
      <!-- kit version -->
			<xsd:attribute name = "version" type = "xsd:string"/>
      <!-- kit release -->
			<xsd:attribute name = "release" type = "xsd:string"/>
      <!-- kit type: allowed values are 'fixed' or 'variable'.  A value of
           'fixed' means only required packages are required.  A value of
           'variable' means not all required packages are actually required
           (e.g., app support kit where only one required package is
           required). -->
			<xsd:attribute name = "type" type = "xsd:string"/>
		</xsd:complexType>
	</xsd:element>
  <!-- A package represents a software package to be installed on a system -->
	<xsd:element name = "package">
		<xsd:complexType>
			<xsd:sequence>
        <!-- name of package -->
	      <xsd:element name = "name" type = "xsd:string"/>
        <!-- not specified if any version of a package is acceptable.  
             otherwise if specific versions a package are required, 'version'
             can be either a specific version (i.e., 1.2.3), a
             regular expression (i.e., 1.\d+.\d+), or expression (i.e.,
             >=1.2.3 -->
	      <xsd:element name = "version" minOccurs = "0" type = "xsd:string"/>
				<xsd:element ref = "variable" minOccurs = "0"/>
        <!-- Current types are 'required' or 'optional' -->
	      <xsd:element name = "type" minOccurs = "0" type = "xsd:string"/>
        <!-- Specified a regular expression for the format of a handleKey.
             I.e., apache-ant-[\d\.]+ -->
	      <xsd:element name = "handleKey" minOccurs = "0" type = "xsd:string"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
  <!-- A variable is used specify custom fields of a package or service that
       may need to be defined.  E.g., each compiler registration would have
       a language and vendor field rather than be specified in each kit
       registration as compiler-$language-$vendor.  This will make it 
       easier to verify registrations that are coming in because we will
       have valid values below.  E.g., the gram5 service would have supported
       job managers.  The variable has a name attribute and
       the text is a regular expression. -->
	<xsd:element name = "variable">
		<xsd:complexType>
			<xsd:simpleContent>
				<xsd:extension base = "xsd:string">
					<xsd:attribute name = "name" type = "xsd:string"/>
				</xsd:extension>
			</xsd:simpleContent>
		</xsd:complexType>
	</xsd:element>
  <!-- A service represents a service to be deployed on a system -->
	<xsd:element name = "service">
		<xsd:complexType>
			<xsd:sequence>
        <!-- name of service -->
	      <xsd:element name = "name" type = "xsd:string"/>
        <!-- version of a service -->
	      <xsd:element name = "version" minOccurs = "0" type = "xsd:string"/>
				<xsd:element ref = "variable" minOccurs = "0"/>
        <!-- Current types are 'required' or 'optional' -->
	      <xsd:element name = "type" minOccurs = "0" type = "xsd:string"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
