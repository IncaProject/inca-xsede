<section id="development-java">
<title>Requirements for java components</title>

<section id="development-java-dirstruct">
<title>Directory Structure</title>

<para>
The directory structure for each java component should follow the same
pattern.  The following outlines the directory structure during development.
The development structure does not have all of the directories that a release
will have.
</para>

<note>
<para>
Anything that can be automatically generated should <emphasis>never</emphasis>
be checked into the repository.
</para>
</note>

<note>
<para>
The lib directory should not be checked into the repository.  All jar files
that belong in the lib directory should be kept in the trunk/contrib
directory.
</para>
</note>

<variableList>
<varListEntry>
<term>src</term>
<listItem>
<para>
The src directory contains all of the source code specifically developed 
for this project.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>etc</term>
<listItem>
<para>
The etc directory should only exist if there are relavant configuration files
or other files needed by the package.  The configuration files should be
populated with default values that will work immediatly upon installation.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>README.txt</term>
<listItem>
<para>
Required.  The readme file must follow the format given in the templates
directory.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>build.xml</term>
<listItem>
<para>
The build file must have a minimum set of targets.  A sample build.xml is
given in the templates directory.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>Dependencies</term>
<listItem>
<para>
This file lists the names of the jar files that can be found in contrib
that are required by this package.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>COPYRIGHT</term>
<listItem>
<para>
This file contains the Inca copyright and can be found in the templates
directory.
</para>
</listItem>
</varListEntry>
</variableList>

</section>

<section id="development-java-buildfile">
<title>Build File Requirements</title>

<para>
There are a few required targets for the build.xml file in each package.
There is a sample build file that has all of the required targets implemented
in inca/admin/templates/javaProject
</para>

<para>Required Targets</para>
<note>
<para>
A template build.xml file is provided and all of these targets have been
implemented.
</para>
</note>
<variableList>
<varListEntry>
<term>compile</term>
<listItem>
<para>
Compiles all of the projects source files and puts them into a directory named
classes in the same directory.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>clean</term>
<listItem>
<para>
Removes the classes directory and the test-results directory as well as any
other files that where generated during the build or run.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>dist</term>
<listItem>
<para>
Creates a binary distribution.  If the target is called with the property
build.output set then the build should be directory at that directory,
otherwise it should be directed at the current working directory.  This target
will read the dependencies file and create a lib directory in the build.output
directory and copy all of the required jar files to that directory.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>help</term>
<listItem>
<para>
Prints out each available target and a description.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>run-tests</term>
<listItem>
<para>
Runs all of the junit tests and puts the output into the test-output
directory. This target will depend upon the dist... in other words it can't be
run on a build file that does not exist in a dist directory.  If you want to
develop and test in the same directory leave build.output to be the current
working directory and run ant run-tests.  It will rebuild the project and run
the tests for you.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>jar</term>
<listItem>
<para>
Creates the jar file that contains all of the classes for this project.
</para>
</listItem>
</varListEntry>
<varListEntry>
<term>stable</term>
<listItem>
<para>
Copies the needed files to the stable area one they are considered ready for
testing and use by other people.
</para>
</listItem>
</varListEntry>
</variableList>
</section>

<section id="development-java-docs">
<title>Javadocs</title>
<para>Every class and every public and protected method must have accompaning
javadocs.  Javadoc must execute with no errors and output to docs/javadoc
inside the project subdirectory.
</para>
</section>

<section id="development-java-tests">
<title>Tests</title>
<para>
Unit Tests
</para>
<para>
Integration Tests
</para>

</section>
</section>
