<section id="userguide-advanced-config">
<title>Advanced Configuration</title>

<para>This section describes advanced configuration options such as
installing components in non-default locations and changing other default properties.</para>

<section id="comp-options">
<title>Inca Component Options</title>
<para>Each inca component has a set of options that can be set in either the $INCA_DIST/etc/common/inca.properties file or from the command line.  The inca.properties file has a list of name value pairs of the format "inca.component.property=value".  For example, to start the agent on port 5323 instead of 6323 and enter the password on the command line rather than get it from standard in, you could: </para>
<orderedList>
<listItem>
<para>edit $INCA_DIST/etc/common/inca.properties and replace:</para>
<itemizedList>
<listItem>
<para>"inca.agent.port=6323" with "inca.agent.port=5323"</para>
</listItem>
<listItem><para>"inca.agent.password=stdin:password>" with "inca.agent.password=pass:<emphasis role="red">&lt;password&gt;</emphasis>" (where &lt;password&gt; is the password set with the createauth command)</para> 
</listItem>
</itemizedList>
<para>execute:</para>
<screen>% cd $INCA_DIST; ./bin/inca start agent</screen>
</listItem>
<listItem>
<para><emphasis role="red">OR</emphasis> execute the following command:
<screen>% cd $INCA_DIST; ./bin/inca start agent -p 5323 -P pass:<emphasis role="red">&lt;password&gt;</emphasis></screen>
</para>
</listItem>
</orderedList>
<para>Man pages with component options are described in <xref linkend="userguide-man">.</para> 

<para>Note:  To change the port of the consumer, see <xref linkend="consumer-port">.
</para>

<para>
Note: if you have more than 5 reporter managers running, increase the number of agent and depot threads in the inca.properties file 
to be 10 more than the number of reporter managers.  For example, if running 15 reporter managers edit the inca.properties file as follows:
<screen>31 # Maximum number of threads running on the agent
32 inca.agent.numthreads=25
...
82 # Maximum number of threads running on the depot
83 inca.depot.numthreads=25
</screen>
</para>
</section>

<section id="custom-notification">
<title>Customizing Series Notification</title>
  <para>
  To customize the notification you receive whenever the result of a series
  comparison changes, you can either modify the default Inca notification
  scripts (found in the sbin/ subdirectory of your Inca Depot installation) or
  write your own.  Set inca.incat.notifiers in your inca.property file to add a
  new script to the options presented in the incat series dialog.  For example,
  to add a script named "MyNotifier" to the options, you would add the
  following line to inca.properties.
  <screen>
  inca.incat.notifiers=EmailNotifier,LogNotifier,MyNotifier
  </screen>
  </para><para>
  The Inca Depot sets environment variables that provide information to the
  notification script about the series and comparison, and the script can
  incorporate these variables into its notification.  For example,
  EmailNotifier uses several of these variables in constructing the email body.
  These are the environment variable names that the Depot defines:
  <table><title>Email Macro Names</title>
  <tgroup cols="2">
  <thead>
    <row>
      <entry><para>Name</para></entry>
      <entry><para>Meaning</para></entry>
    </row>
  </thead>
  <tbody>
<!--
NOTE: Some available email macros have little practical use for end users.  The
documentation for these is commented below to avoid cluttering the table.
-->
<!--
    <row>
      <entry><para>activated</para></entry>
      <entry><para>the suite version where this series was last activated</para></entry>
    </row>
-->
    <row>
      <entry><para>incaargs</para></entry>
      <entry><para>the arguments passed to the reporter</para></entry>
    </row>
    <row>
      <entry><para>incabody</para></entry>
      <entry><para>the report body</para></entry>
    </row>
    <row>
      <entry><para>incacollected</para></entry>
      <entry><para>the time the reporter ran</para></entry>
    </row>
    <row>
      <entry><para>incacommited</para></entry>
      <entry><para>the time the report was entered in the Depot</para></entry>
    </row>
    <row>
      <entry><para>incacomparison</para></entry>
      <entry><para>the comparison specified for this series</para></entry>
    </row>
<!--
    <row>
      <entry><para>comparisonId</para></entry>
      <entry><para>the Inca database id of the comparison</para></entry>
    </row>
-->
    <row>
      <entry><para>incacomparisonResult</para></entry>
      <entry><para>the output of the comparison for this report, typically "SUCCESS" or "FAIL" followed by a list of identifiers</para></entry>
    </row>
<!--
    <row>
      <entry><para>comparitor</para></entry>
      <entry><para>the name of the comparitor class used with this series ("ExprComparitor")</para></entry>
    </row>
-->
    <row>
      <entry><para>incacompleted</para></entry>
      <entry><para>whether or not the reporter completed execution</para></entry>
    </row>
    <row>
      <entry><para>incaconfigId</para></entry>
      <entry><para>the Inca database id of the series configuration</para></entry>
    </row>
    <row>
      <entry><para>incacontext</para></entry>
      <entry><para>the complete command, including arguments, used to execute the reporter</para></entry>
    </row>
    <row>
      <entry><para>incacpuLimit</para></entry>
      <entry><para>the maximum CPU seconds allowed for this reporter to execute</para></entry>
    </row>
    <row>
      <entry><para>incacpuUsage</para></entry>
      <entry><para>the actual CPU seconds used by this reporter execution</para></entry>
    </row>
<!--
    <row>
      <entry><para>incadeactivated</para></entry>
      <entry><para>the suite version where this series was last deactivated, -1 if never</para></entry>
    </row>
-->
    <row>
      <entry><para>incaerrorMessage</para></entry>
      <entry><para>any failure message recorded by the reporter</para></entry>
    </row>
    <row>
      <entry><para>incahostname</para></entry>
      <entry><para>the name of the host where the reporter executed</para></entry>
    </row>
    <row>
      <entry><para>incainstanceId</para></entry>
      <entry><para>the Inca database id of this reporter execution</para></entry>
    </row>
    <row>
      <entry><para>incalog</para></entry>
      <entry><para>log messages recorded by the reporter</para></entry>
    </row>
    <row>
      <entry><para>incamemoryLimit</para></entry>
      <entry><para>the maximum memory MB allowed for this reporter to execute</para></entry>
    </row>
    <row>
      <entry><para>incamemoryUsage</para></entry>
      <entry><para>the actual memory MB used by this reporter execution</para></entry>
    </row>
    <!--
    <row>
      <entry><para>incanice</para></entry>
      <entry><para>whether to run this reporter nice -9 (unused)</para></entry>
    </row>
    -->
    <row>
      <entry><para>incanickname</para></entry>
      <entry><para>the nickname of this series</para></entry>
    </row>
<!--
    <row>
      <entry><para>incanotifier</para></entry>
      <entry><para>the name of the notifier script</para></entry>
    </row>
-->
    <row>
      <entry><para>incareportId</para></entry>
      <entry><para>the Inca database id of the report</para></entry>
    </row>
    <row>
      <entry><para>incareporter</para></entry>
      <entry><para>the name of the reporter</para></entry>
    </row>
    <row>
      <entry><para>incareporterPath</para></entry>
      <entry><para>the path to the reporter on the host where it executed</para></entry>
    </row>
    <row>
      <entry><para>incaresource</para></entry>
      <entry><para>the name of the Inca resource where the reporter executed</para></entry>
    </row>
    <row>
      <entry><para>incaresult</para></entry>
      <entry><para>"PASS" or "FAIL", depending on whether or not the reporter completed execution</para></entry>
    </row>
<!--
    <row>
      <entry><para>incarunInfoId</para></entry>
      <entry><para>the Inca database id of runtime information for this reporter execution</para></entry>
    </row>
-->
    <row>
      <entry><para>incaschedule</para></entry>
      <entry><para>the cron spec for this series' schedule</para></entry>
    </row>
    <row>
      <entry><para>incaseriesId</para></entry>
      <entry><para>the Inca database id of this series</para></entry>
    </row>
    <row>
      <entry><para>incastderr</para></entry>
      <entry><para>any text written by the reporter to stderr</para></entry>
    </row>
<!--
    <row>
      <entry><para>incatarget</para></entry>
      <entry><para>the notification script parameters</para></entry>
    </row>
-->
    <row>
      <entry><para>incauri</para></entry>
      <entry><para>the reporter URI</para></entry>
    </row>
    <row>
      <entry><para>incaversion</para></entry>
      <entry><para>the reporter version</para></entry>
    </row>
    <row>
      <entry><para>incawallClockLimit</para></entry>
      <entry><para>the maximum wall clock seconds allowed for this reporter to execute</para></entry>
    </row>
    <row>
      <entry><para>incawallClockUsage</para></entry>
      <entry><para>the actual wall clock seconds used by this reporter execution</para></entry>
    </row>
    <row>
      <entry><para>incaworkingDir</para></entry>
      <entry><para>the working directory for the reporter manager on the host where the reporter executed</para></entry>
    </row>
  </tbody>
  </tgroup>
  </table>
  </para>
  <para>Values that are specified as the "Script Arguments" in incat are
  passed as arguments to the script.</para>
</section>

<section id="report-filtering">
<title>Report Filtering</title>
<para>
The Inca Depot allows you to filtering incoming reports before information
about them is placed in the Inca database.  To do so, you need to write a class
that extends edu.sdsc.inca.depot.util.ReportFilter and set the property
inca.depot.reportFilter to the name of the class.
</para><para>
An Inca report consists of five elements, all strings: the execution context
(reporter name and arguments), the name of the resource where the reporter ran,
the reporter stdout (i.e., report), the reporter stderr, and a report of the
system resources used by the reporter execution.  Of these, stderr may be null;
the other four are required.
</para><para>
The ReportFilter class provides set and get methods for each of these five
elements.  If the inca.depot.reportFilter property is set, the Inca Depot
creates an instance of the named class, then calls each of its set and get
methods in turn to allow it to make changes to any of the elements.  Changes
made by the filter are incorporated into the information stored in the Depot
database.  If a ReportFilter get method for any of the elements other than
stderr returns null, the Depot discards the report.
</para><para>
For example, this class directs the Depot to ignore reports that arrive from
blue.ufo.edu and modifies report stderr values that contain particular messages.
</para><para>
<screen>
public class MyReportFilter extends edu.sdsc.inca.depot.util.ReportFilter {

  public String getResource() {
    String resource = super.getResource();
    return resource.equals("blue.ufo.edu") ? null : resource;
  }

  public String getStderr() {
    String stderr = super.getStderr();
    stderr = stderr.replaceAll("Try again.*\n", "");
    return stderr;
  }

}
</screen>
</para>
<para>To install your filter, first compile the class.</para>
<screen>% javac -classpath lib/inca-depot.jar MyReportFilter.java</screen>
<para>Copy the compiled class to your <filename>$INCA_DIST/lib</filename> 
directory.  For example, </para>
<screen>% cp MyReportFilter.class $INCA_DIST/lib</screen>
<para>Then add the inca.depot.reportFilter property to your 
<filename>$INCA_DIST/etc/common/inca.properties</filename> file.</para>
<screen>...
inca.depot.reportFilter=MyReportFilter
...
</screen>
<para>Finally, restart the depot.</para>
<screen>% ./bin/inca restart depot</screen>
<section id="downtime-filter">
<title>Downtime Filter</title>
<para>The depot has a ready to use filter called "DowntimeFilter" that prefixes
the error messages of resources marked as down with "DOWNTIME: +optionalString+:".  
By default the consumer will display results with a error message starting with 
"DOWNTIME:" neutrally - summary pages print the result as "down" instead of "error" and
historical graphs show the result as "unknown".  The consumer has templates in the 
<filename>inca-common.xsl</filename> stylesheet called "getLink" and "getDownErr" to 
display errors generated by the downtime filter in the report summary and details pages.</para>
<para>The downtime filter is included in the inca-depot.jar and looks like:</para>
<para>
<screen>package edu.sdsc.inca.depot.util;

import org.apache.log4j.Logger;
import java.net.URL;
import java.util.Properties;
import java.io.InputStream;
import java.io.IOException;

/**
 * Prefixes error messages in depot reports with "DOWNTIME: +optionalString+: "
 * if the resource the report ran on is in downtime.   Resources are determined
 * to be in downtime if they are listed in a downtime properties file.  In order
 * to reduce overhead, the downtime properties file is retrieved and cached at
 * a refresh interval in the getDowntimes() method instead of being retrieved
 * for each filter instance.
 */
public class DowntimeFilter extends edu.sdsc.inca.depot.util.ReportFilter {
  private static Logger logger = Logger.getLogger(DowntimeFilter.class);
  private static Properties downtimes = new Properties();
  private static long lastRefresh = 0;

  /**
   * Returns cached property list of resources in downtime.  Gets and caches
   * property list from file in classpath (downtime.properties) if cache has
   * expired according to refreshMins.
   *
   * The property list file contents can be:
   *
   *  downResource1=optionalErrorMessagePrefixStringForResource1
   *  downResource2=optionalErrorMessagePrefixStringForResource2
   *
   * OR
   *
   *  downResource1
   *  downResource2
   *
   */
  synchronized static Properties getDowntimes()  {
    String downtimePropFile = System.getProperty("inca.depot.downtimeFile");
    if(downtimePropFile == null) {
      downtimePropFile  = "downtime.properties";
    }
    String downtimeRefresh = System.getProperty("inca.depot.downtimeRefresh");
    if(downtimeRefresh == null) {
      downtimeRefresh  = "15";
    }
    Integer refreshMins = Integer.parseInt(downtimeRefresh);
    long minSinceLastRefresh = (System.currentTimeMillis()-lastRefresh)/60000;
    if (minSinceLastRefresh >= refreshMins){
      URL url = ClassLoader.getSystemClassLoader().getResource(downtimePropFile);
      if(url == null) {
        logger.error( downtimePropFile + " not found in classpath" );
      }
      logger.debug( "Located file " + url.getFile() );
      downtimes.clear();
      try {
        InputStream is = url.openStream();
        downtimes.load(is);
        is.close();
      } catch (IOException e){
        logger.error( "Can't load properties file" );
      }
      lastRefresh = System.currentTimeMillis();
    }
    return downtimes;
  }

  /**
   * Writes new report with modified error message to depot if resource is down
   *
   * @return  string with depot report (reporter Stdout)
   */
  public String getStdout() {
    String resourceProp  = getDowntimes().getProperty(super.getResource());
    if (resourceProp != null){
      logger.debug( super.getResource() + " is down " + resourceProp );
      return super.getStdout().replaceFirst(
          "&lt;errorMessage>", "&lt;errorMessage>DOWNTIME:"+ resourceProp +": ");
    } else{
      return super.getStdout();
    }
  }

}</screen>
</para>

<para>To use this filter, first 
write a script that prints the names of down resources to a file called "downtime.properties" 
in the classpath of the depot (e.g. $INCA_DIST/etc/downtime.properties).  If you prefer to 
call the file something besides "downtime.properties", set the name of the file in 
your <filename>$INCA_DIST/etc/common/inca.properties</filename> file:</para>
<screen>...
inca.depot.downtimePropFile=MyDowntimeFilename
...</screen>
<para>In order to reduce depot overhead, the properties file is retrieved and 
cached every 15 minutes by default.  The caching frequency can be changed in 
<filename>$INCA_DIST/etc/common/inca.properties</filename> to a different number of 
minutes:</para>
<screen>...
inca.depot.downtimeRefresh=5
...</screen>
<para>The "downtime.properties" file contents can be something like:
<screen>downResource1=optionalErrorMessagePrefixStringForResource1
downResource2=optionalErrorMessagePrefixStringForResource2</screen>
    OR
<screen>downResource1
downResource2</screen>
</para>
<para>Next add the inca.depot.reportFilter property to your 
<filename>$INCA_DIST/etc/common/inca.properties</filename> file.</para>
<screen>...
inca.depot.reportFilter=edu.sdsc.inca.depot.util.DowntimeFilter
...
</screen>
<para>Finally, restart the depot.</para>
<screen>% ./bin/inca restart depot</screen>
</section>

<section id="all2all-filter">
<title>All2All Filter</title>
<para>The depot has a ready to use filter called "All2AllFilter" that prefixes
error messages in depot reports with "NOT_AT_FAULT: " if the resource the 
report ran on is not at fault for the "all2all" error and the
report is not already prefixed with "DOWNTIME" (see <xref linkend="userguide-incat-all2all"> 
for more information about configuring "all2all" tests).  Resources are determined to
not be at fault if the summary property that matches their nickname has failed. 
Summary properties are written for any reports with the "summary.successpct.performance" reporter name.
</para>
<para>By default, errors that begin with "NOT_AT_FAULT" are displayed neutrally 
(see <xref linkend="consumer-neutral-errs">). The all2all filter is included in the inca-depot.jar 
and is configured by adding the inca.depot.reportFilter property to your 
<filename>$INCA_DIST/etc/common/inca.properties</filename> file</para>
<screen>...
inca.depot.reportFilter=edu.sdsc.inca.depot.util.All2AllFilter
...
</screen>
<para>and restarting the depot.</para>
<screen>% ./bin/inca restart depot</screen>
</section>

<section id="multiple-filters">
<title>Mutiple Filters</title>
<para>The depot can apply multiple filters to reports.  To specify more than one filter, use a comma 
separated list for the inca.depot.reportFilter property in <filename>$INCA_DIST/etc/common/inca.properties</filename>:
<screen>inca.depot.reportFilter=edu.sdsc.inca.depot.util.DowntimeFilter, edu.sdsc.inca.depot.util.All2AllFilter</screen>
Filters are applied in the order they are listed.</para>
</section>

</section>

<section id="db-config">
<title>Depot Database Configuration</title>
<para>The Inca depot uses Hibernate to interface to a relational database backend for 
storing reports and incat configuration.  By default, the Inca depot uses Hibernate's HSQL 
database but can be configured to use any Hibernate supported database.  
We have tested the Inca depot with PostgreSQL and Oracle.
</para>
<para>Steps for using a depot database other than HSQL are as follows: </para>
<orderedList>
<listItem>
<para>Stop the depot 
<screen>% cd $INCA_DIST; ./bin/inca stop depot</screen>
</para>
</listItem>

<listItem>
<para>Edit $INCA_DIST/etc/hibernate.properties</para>
<itemizedList>
<listItem>
<para>
Comment out the first 5 lines which specifies for hibernate to use 
hsql as its backend database: 
<screen>1 #hibernate.dialect=org.hibernate.dialect.HSQLDialect
2 #hibernate.connection.driver_class=org.hsqldb.jdbcDriver
3 #hibernate.connection.url=jdbc:hsqldb:test
4 #hibernate.connection.username=sa
5 #hibernate.connection.password=
</screen>
</para>
</listItem>
<listItem>
<para>
Uncomment the block which specifies for hibernate to use your database (i.e., for PostgreSQL uncomment 8-13, 
for MySQL uncomment 17-21, for Oracle uncomment 24-28). 
</para>
</listItem>
<listItem>
<para>Change the uncommented hibernate.connection.url, hibernate.connection.username and hibernate.connection.password 
property values to be the host/db name, login username and password for your database.  
</para>
</listItem>
</itemizedList>
</listItem>

<listItem>
<para>
Put JDBC drivers for your database in the $INCA_DIST/lib directory.  Driver download locations:
<ulink url="http://jdbc.postgresql.org/download.html">PostgreSQL</ulink>, 
<ulink url="http://www.mysql.com/products/connector/j/">MySQL</ulink>,
<ulink url="http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/">Oracle</ulink>
</para>
</listItem>

<listItem>
<para>
Initialize the depot (set up the Inca tables):
<screen>% cd $INCA_DIST; ./bin/inca depot -d</screen>
You should see something like:
<screen>Initializing c3p0 pool... 
... 
Database Initialization Completed</screen>
</para>
</listItem>

<listItem>
<para>Start the depot 
<screen>% ./bin/inca start depot</screen>
</para>
</listItem>
</orderedList>


</section>

<section id="peer-depots">
<title>Depot Fault Tolerance</title>
<para>In order to respond to unexpected depot failure, configure
peer depots to mirror each other so that if one fails another can 
take over.  NOTE: the depots must be using a database other than 
the default hibernate database.  There's a bug in hibernate that
prevents synchronization.  To configure the depot database see
<xref linkend="db-config">. 
        <figure id="redundant-depot">
          <title>Inca deployment with fault tolerant depot</title>
          <graphic fileref="figures/depot/depot-enhancement.jpg" align="center"></graphic>
        </figure>
</para>
<para>The steps for depots mirroring are as follows: </para>
<orderedList>

<listItem>
<para>Install the software for each peer depot
<screen>% wget http://inca.sdsc.edu/releases/&ugVersion/incaInstall.sh;
% sh incaInstall.sh $INCA_DIST depot;
</screen>
</para>
</listItem>

<listItem>
<para>Copy the <filename>$INCA_DIST/etc/depot.*pem</filename> and <filename>$INCA_DIST/etc/trusted/*</filename>
 files from the original 
depot to the peer depot <filename>$INCA_DIST/etc</filename> and <filename>$INCA_DIST/etc/trusted</filename>
 directories respectively. Copy any custom notification scripts or filters from the original depot to the peer.</para>
</listItem>

<listItem>
<para>
Edit <filename>$INCA_DIST/etc/common/inca.properties</filename> on both the original and peer depot and 
uncomment the blocks which specify the hosts for your depots.  These should be the full hostname and 
should not be "localhost" for either.  For example, if your 
orginal depot is on rocks-101.sdsc.edu:6324 and your peer depot is on 
cuzco.sdsc.edu:6324, your edits would look like:</para>
<screen>...
# URIs of peer depots
inca.depot.peers=incas://rocks-101.sdsc.edu:6324 incas://cuzco.sdsc.edu:6324
...</screen>
</listItem>

<listItem>
<para>
Edit <filename>$INCA_DIST/etc/common/inca.properties</filename> where the consumer is installed and
uncomment the block which specifies the hosts for your depots.  For example, if your 
orginal depot is on rocks-101.sdsc.edu:6324 and your peer depot is on 
cuzco.sdsc.edu:6324, your edit would look like:</para>
<screen>...
# URI to the depot -- use incas:// if auth is required and inca:// if not
inca.consumer.depot=incas://rocks-101.sdsc.edu:6324 incas://cuzco.sdsc.edu:6324
...</screen>
</listItem>

<listItem>
<para>Restart the original server components (depot, agent, consumer).  
Start the peer depot and look for "DB synchronization succeeded" in the 
<filename>$INCA_DIST/var/depot.log</filename> of the peer depot:
<screen>% cd $INCA_DIST; bin/inca start depot --sync</screen>
</para>
</listItem>

</orderedList>

<para>In addition to a redundant depot, the consumer can also be configured for fault
tolerance as shown in the figure below.
        <figure id="redundant-depot-consumer">
          <title>Inca deployment with fault tolerant depot and consumer</title>
          <graphic fileref="figures/depot/depot-enhancement2.jpg" align="center"></graphic>
        </figure>

</para>

</section>

<section id="userguide-advanced-manual">
<title>Manual Access Method</title>

<para>A resource administrator may be unable to start a reporter manager
using one of the automated methods (ssh, globus2, or local).  In this case, an
Inca administrator can add the resource using the access method 'manual'. 
The following steps will need to be taken by the Inca administrator and
resource administrator:
</para>

<para>Inca Administrator</para>
<simplelist type=horiz columns=1>
<member>Step <xref linkend="man-admin-cert">: Generate a certificate for the
reporter manager.</member>
<member>Step <xref linkend="man-admin-add">: Add resource in incat with access method 'manual'</member>
</simpleList>
<para>Resource Administrator</para>
<simplelist type=horiz columns=1>
<member>Step <xref linkend="man-sysadmin-install">: Install reporter manager</member>
<member>Step <xref linkend="man-sysadmin-cred">: Generate private key and
certificate request</member>
<member>Step <xref linkend="man-sysadmin-cert">: Install certificate and
trusted certificate.</member>
<member>Step <xref linkend="man-sysadmin-start">: Start reporter manager</member>
</simpleList>

<orderedList>
  <listItem id="man-sysadmin-install">
    <para>RESOURCE ADMIN: install the reporter manager distribution on your resource using the following steps.</para>
    <orderedList>
      <listItem>
<para>Create an installation directory for the reporter manager (e.g.,
$RM_INSTALL_DIR).  Download the reporter manager tarball and build
script:</para>
<screen>% cd $RM_INSTALL_DIR; \
  wget http://inca.sdsc.edu/releases/&ugVersion/Inca-ReporterManager.tar.gz; \
  wget http://inca.sdsc.edu/releases/&ugVersion/buildRM.sh</screen>
      <para> At this point
      the directory on the remote machine should look something like this:
      <screen>% ls         
Inca-ReporterManager.tar.gz    
buildRM.sh                    
</screen>
      </para></listItem>
      <listItem><para>Install the reporter manager and list directories to verify files unpacked correctly:</para>
      <screen>% bash buildRM.sh $RM_INSTALL_DIR Inca-ReporterManager.tar.gz

% ls $RM_INSTALL_DIR 
Inca-ReporterManager-9.6764    build.log    lib    share
Inca-ReporterManager.tar       buildRM.sh   man    var
bin                            etc          sbin
      </screen>
      <para>Install the default set of reporters and their libraries:</para>
      <screen>% cd $RM_INSTALL_DIR; wget http://inca.sdsc.edu/releases/&ugVersion/Inca-Reporter.tar.gz
% cd var; tar zxvf ../Inca-Reporter.tar.gz; cd Inca-Reporter-*
% perl Makefile.PL PREFIX=${RM_INSTALL_DIR}/var/reporter-packages \
 INSTALLDIRS=perl LIB=${RM_INSTALL_DIR}/var/reporter-packages/lib/perl \
 INSTALLSCRIPT=${RM_INSTALL_DIR}/var/reporter-packages/bin \
 INSTALLMAN1DIR=${RM_INSTALL_DIR}/var/reporter-packages/man/man1 \
 INSTALLMAN3DIR=${RM_INSTALL_DIR}/var/reporter-packages/man/man3
% make
% make install</screen>
      </listItem>
    </orderedList>
  </listItem>
  <listItem id="man-sysadmin-cred">
    <para>RESOURCE ADMIN: create a set of credentials for the reporter manager (i.e., private
    key and certificate request) using the command below.</para>
    <screen>
% cd $RM_INSTALL_DIR; ./sbin/inca createRmCertRequest -P stdin:password: 
    </screen>
    <para>Enter a password for your key (to use when you start up
    the reporter manager).  Two files will be created in 
    <filename>$RM_INSTALL_DIR/etc</filename>:  
    an encrypted private key called <filename>rmkey.pem</filename> and 
    a certificate request called <filename>rmreq.pem</filename>.  
    Email <filename>rmreq.pem</filename> to your Inca administrator and they
    will generate a certificate for your reporter manager.
    </para>
  </listItem>
  <listItem id="man-admin-cert">
    <para>INCA ADMIN: upon receiving a rmreq.pem file,
    generate a certificate for a reporter manager using the 
    command below.  Replace "rmreq.pem" with to the path to the rmreq.pem
    file that you received from the resource administrator and
    "rmcert-resource.pem" with the path to the reporter manager certificate
    that will be generated by the command.
    </para>
    <screen>
% cd $INCA_DIST; ./bin/inca createRmCert -P stdin:password: <emphasis role="red">rmreq.pem</emphasis> <emphasis role="red">rmcert-resource.pem</emphasis>
    </screen>
    <para>Enter the password for the inca distribution (i.e., created in
    Step <xref linkend="qs-step4"> during the initial installation process).  
    Email the reporter manager certificate, "rmcert-resource.pem",
    and trusted certificate to the resource administrator.  The trusted
    certificate is the file ending with the <filename>.0</filename> extension
    in your <filename>$INCA_DIST/etc/trusted</filename> directory.  For
    example <filename>f73fee74.0</filename> is the trusted certificate in the
    following directory:
    </para>
    <screen>
% ls etc/trusted/
agentcert.pem  f73fee74.0  rocks-101.sdsc.educert.pem
    </screen>
  </listItem>
  <listItem id="man-admin-add">
    <para>INCA ADMIN: add the specified resource within incat
    and choose 'manual' as below:
    </para>
    <figure id="manual.fig">
      <title>Add Resource Screen</title>
      <graphic fileref="figures/incat/manual.jpg" align="center"></graphic>
    </figure>
    <para> Make sure the 
    "Equivalent" box is checked, otherwise the depot may discard reports with 
    "unattached to any DB config" warnings.  The new "manualResource" will
    also need to be added to the "defaultGrid" resource in order to run the
    default sampleSuite.  Select "Agent->Commit" from the menu to
    commit the changes.  
    </para>
  </listItem>
  <listItem id="man-sysadmin-cert">
    <para>RESOURCE ADMIN: install the certificate and trusted certificate from the 
    Inca admin in your reporter manager installation.  Replace
    "rmcert-resource.pem" and "trusted.0" with the names of the files
    received from your Inca administrator.
    </para>
    <screen>
% cd $RM_INSTALL_DIR
% cp <emphasis role="red">rmcert-resource.pem</emphasis> $RM_INSTALL_DIR/etc/rmcert.pem
% mkdir $RM_INSTALL_DIR/etc/trusted
% cp <emphasis role="red">trusted.0</emphasis> $RM_INSTALL_DIR/etc/trusted
    </screen>
  </listItem>
  <listItem id="man-sysadmin-start">
    <para>RESOURCE ADMIN: 
    Finally, you can start up the reporter manager using the commands
below.  Replace "depotHost" with the hostname where the depot is running and
replace "manualResource" with the manual resource group name added in step
<xref linkend="man-admin-add">: </para>

       <screen>% cd $RM_INSTALL_DIR
% ./sbin/inca reporter-manager \
 -a incas://<emphasis role="red">agentHost</emphasis>:6323 \
 -d incas://<emphasis role="red">depotHost</emphasis>:6324 \
 -c etc/rmcert.pem \
 -k etc/rmkey.pem -t etc/trusted \
 -e bin/inca-null-reporter \
 -r var/reporter-packages \
 -R sbin/reporter-instance-manager \
 -v var \
 -w 1 \
 -i <emphasis role="red">manualResource</emphasis> \
 -s suite.xml \
 -L DEBUG \
 -l var/reporter-manager.log \
 -P true
<emphasis role="red">&lt;enter your password&gt;</emphasis></screen>
<para>Command will hang until the password for the reporter manager key is entered.  
If the private key is not password protected, don't use the -P option in the command above.
Check to make sure the reporter manager is running by doing a "ps | grep reporter-manager" and 
make sure there aren't errors by doing a "grep ERROR $RM_INSTALL_DIR/var/*".</para>
        <para>To stop the reporter manager at any time, type </para>
             <screen>
% ./sbin/inca stop reporter-manager
</screen>
        <para>Make sure all reporter-manager ps are stopped</para>
        <screen> % ps | grep manager </screen>
</listItem> 
</orderedList>

</section>

<section id="userguide-advanced-batch">
<title>Batch Systems</title>

  <para>
  The cluster.batch.wrapper reporter can be useful when running Inca on batch
  systems.  Without an --exec argument, this reporter submits a trivial program
  to the batch scheduler and reporters the amount of time it spends in the queue
  before executing.  If given an --exec argument, cluster.batch.wrapper instead
  submits the argument value (which should contain a reporter invocation) and
  collects and reports it output.  This use allows reporters to be executed on
  batch nodes, rather than on the submission host.  For example, this command
  will report the version of gcc that is installed on the batch nodes of a PBS
  cluster.
  </para>
  <screen>
% cluster.batch.wrapper --scheduler=pbs --exec=cluster.compiler.gcc.version
  </screen>
  <para>
  The --scheduler argument is the only one required; valid values are cobalt,
  dqs, loadleveler, lsf, pbs, and sge.  Additional recognized arguments are as
  follows.
  </para>

  <table><title>cluster.batch.wrapper options</title>
  <tgroup cols="3">
  <thead>
    <row>
      <entry><para>Name</para></entry>
      <entry><para>Meaning</para></entry>
      <entry><para>Default value</para></entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry><para>account</para></entry>
      <entry><para>User account to charge</para></entry>
      <entry><para>none</para></entry>
    </row>
    <row>
      <entry><para>nodes</para></entry>
      <entry><para>Number of batch nodes to request</para></entry>
      <entry><para>1</para></entry>
    </row>
    <row>
      <entry><para>poll</para></entry>
      <entry><para>How often (in seconds) to check for job completion</para></entry>
      <entry><para>10</para></entry>
    </row>
    <row>
      <entry><para>queue</para></entry>
      <entry><para>The name of the queue to submit to</para></entry>
      <entry><para>none</para></entry>
    </row>
    <row>
      <entry><para>shell</para></entry>
      <entry><para>The shell to use to run the batch job</para></entry>
      <entry><para>/bin/sh</para></entry>
    </row>
    <row>
      <entry><para>submitparam</para></entry>
      <entry><para>Additional batch-scheduler-specific parameters to use in the submission</para></entry>
      <entry><para>none</para></entry>
    </row>
    <row>
      <entry><para>timeout</para></entry>
      <entry><para>The maximum time (in minutes) the job may wait in the batch queue</para></entry>
      <entry><para>0 (unlimited)</para></entry>
    </row>
    <row>
      <entry><para>type</para></entry>
      <entry><para>Submission type, used with LoadLeveler (job_type parameter), PBS (-l nodes parameter) and SGE (-pe parameter)</para></entry>
      <entry><para>none</para></entry>
    </row>
    <row>
      <entry><para>var</para></entry>
      <entry><para>Path to a temp file directory</para></entry>
      <entry><para>Current working directory</para></entry>
    </row>
    <row>
      <entry><para>walllimit</para></entry>
      <entry><para>The amount of time (in minutes) to request for the job </para></entry>
      <entry><para>10</para></entry>
    </row>
  </tbody>
  </tgroup>
  </table>

  <para>
  Here are some additional examples of using cluster.batch.wrapper to submit
  Inca reporters to a batch queue.
  </para>

  <screen>
% cluster.batch.wrapper --scheduler=pbs --account=alf63 \
  --exec=cluster.compiler.gcc.version

% cluster.batch.wrapper --scheduler=loadleveler --queue=normal --type=parallel \
  --exec='network.ping.unit --host=ufo.edu'

% cluster.batch.wrapper --scheduler=sge --submitparam='-js 1' \
  --submitparam='-l h_vmem=600' \
  --exec='cluster.ps.unit --process=init --psargs=-x'
  </screen>

  <para>
  In incat, you can specify that cluster.batch.wrapper should be used to submit
  a series by including its name and arguments in the series context string.
  Inca stores installed reporters in the directory $INSTALL_DIR/bin, so the
  path to cluster.batch.wrapper will be $INSTALL_DIR/bin/cluster.batch.wrapper.
  The figure below shows the context string for the network.ping.unit series
  mentioned above.
  </para>
  <graphic fileref="figures/incat/ug-incat-batch.png" align="center">
  </graphic>

</section>

<section id="userguide-advanced-runnow">
<title>Manual Run Now</title>
 
<para>Oftentimes resource or system administrators will want to show that a
problem has been resolved by independently executing inca tests before they are
scheduled to run so that their results appear on status pages.  Rather than
granting resource administrators full privileges just to use incat's "run now"
button, the inca administrator can provide resource administrators with a
"manual run now" option - a command line script to execute tests and send
results to the depot.  A "run now" can also be invoked via the Inca web pages 
if configured (by default "run now" is not enabled).  See <xref
linkend="consumer-report-details"> for more information. </para>

<section id="userguide-advanced-runnow-config">
<title>Configuring the Manual Run Now Script</title>

<para>The instructions below need to be done *once* by the Inca administrator on each 
resource where the resource administrator would like to manually run tests.</para>

<orderedList>
<listItem><para>
To allow system administrators or others to execute tests with their own password, 
copy the reporter manager key and cert for them and change the password. The 
old password is the same as the password used in the createauth step of installing inca.
<screen>
% cd $INCA_DIST/etc; cp rmkey.pem adminkey.pem
% cp rmcert.pem admincert.pem
% chmod 600 adminkey.pem
% ssh-keygen -p

Enter file in which the key is (/home/.ssh/id_rsa):
  /home/incaReporterManager/etc/adminkey.pem
Enter old passphrase: 
Key has comment '/home/incaReporterManager/etc/adminkey.pem'
Enter new passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved with the new passphrase.
</screen>
</para></listItem>

<listItem><para>Create a custom wrapper script for <filename>$INCA_DIST/bin/inca-run-now</filename> 
called <filename>$INCA_DIST/bin/admin-run-now</filename> using the script below as an example. 
Use the agent and depot URIs for your installation as AGENT and DEPOT and the agent's name for the resource as RESOURCE.  
You may need to add the "-u" parameter for the appropriate user if the reporter manager is not running as inca. 
Run the script with the "-h" flag for more information about its input parameters:
<screen>% setenv PERL5LIB lib/perl:$PERL5LIB; bin/inca-run-now -h</screen>
</para><para>
Example wrapper script:
<screen>#!/bin/sh

AGENT=incas://localhost:6323
DEPOT=incas://localhost:6324
RESOURCE=localResource

if ( test -z "${PERL5LIB}" ); then
PERL5LIB=lib/perl
else
PERL5LIB=lib/perl:${PERL5LIB}
fi
export PERL5LIB

./bin/inca-run-now -a $AGENT -c etc/admincert.pem -d $DEPOT \
  -k etc/adminkey.pem -P "stdin:password:" \
  -t etc/trusted -i $RESOURCE $* </screen></para>
</listItem>

<listItem><para> 
<emphasis role="red">(optional)</emphasis>The command to use the <filename>admin-run-now</filename> script could be 
added to the reporter details status pages.  This would require editing the <filename>$INCA_DIST/etc/instance.xsl</filename> 
file on the machine where the consumer is running and adding the xsl required to print a command like:
<screen> % cd /home/inca/inca2install; ./bin/admin-run-now ant-unit </screen>
The xsl would be similar to:
<screen>
&lt;tr&gt;
  &lt;td colspan="2" class="header"&gt;
    &lt;xsl:text&gt;Run now command (system admins only):&lt;/xsl:text&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan="2"&gt;
    &lt;xsl:variable name="repPath" select="$report/reporterPath"/&gt;
    &lt;xsl:variable name="incaloc" select=
      "replace($report/reporterPath, '/var/reporter-packages/bin/.*', '')" /&gt;
    &lt;p class="code"&gt; &lt;xsl:text&gt;% cd &lt;/xsl:text&gt;
    &lt;xsl:value-of select="$incaloc"/&gt;
    &lt;xsl:text&gt;; ./bin/admin-run-now &lt;/xsl:text&gt;
    &lt;xsl:value-of select="$nickName"/&gt;&lt;/p&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</screen>
</para></listItem>
</orderedList>
</section>


<section id="userguide-advanced-runnow-using">
<title>Using the Manual Run Now Script</title>

<orderedList>

<listItem><para> 
Log into the inca account on the desired resource and change to the $INCA_DIST directory.
<screen>% cd $INCA_DIST</screen>
</para></listItem> 

<listItem><para> 
Execute <filename>admin-run-now</filename> script using the series nickname as the 
input parameter and the password from your inca administrator: 
<screen>% ./bin/admin-run-now ant_version
password:*********
Started Inca reporter-manager</screen>
You can also print the XML result that gets sent to the Inca server 
in <filename>$INCA_DIST/var/run-now.log</filename> 
by using the "-L DEBUG" flag:
<screen>% ./bin/admin-run-now -L DEBUG ant_version
password:*********
Started Inca reporter-manager</screen>
</para></listItem> 

<listItem><para> 
Check for errors in <filename>$INCA_DIST/var/run-now.log</filename>.
Wait about 10-15 minutes to view the result on your inca status page (data is 
cached and takes a few minutes to update).
</para></listItem> 

<listItem><para> 
<emphasis role="red">(optional)</emphasis>Execute multiple tests: in order 
to specify that more than one test be executed, 
use a Perl regex expression instead of the test name like:
<screen>% ./bin/admin-run-now &lt;perl regex&gt;</screen>
</para><para>
For example, to execute all ant tests
<screen>% ./bin/admin-run-now "ant.*"</screen>
</para><para>
In order to check your regular expression, you can use the "-l" flag. 
This option will list the tests but will NOT execute them. 
For example, to display all ant tests that would be executed:
<screen>% ./bin/admin-run-now -l "ant.*"
Suite:  sampleSuite (2 series)
ant_helloworld_compile_test
ant_version</screen>
</para><para>
To view all tests, use the regular expression ".*" as below:
<screen>% ./bin/admin-run-now -l ".*"</screen>
</para><para>
You will notice that test names are listed under a "Suite: &lt;name&gt;" header. 
You can also use that suite name to execute all of the tests included in it. 
For example, the following shows the tests available in the sampleSuite kit:
<screen>Suite:  sampleSuite (10 series)
ant_helloworld_compile_test
ant_version
gcc_hello_world
gcc_version
java_hello_world
java_version
openssh_version
openssl_version
vtk-nvgl_version
wget_page_test</screen>
</para><para>
To execute all test in a kit using the suite name, type:
<screen>% ./bin/admin-run-now sampleSuite</screen>
</para></listItem> 
</orderedList>


<para>Run the script with the "-h" flag for help information:
<screen>% ./bin/admin-run-now -h</screen>
</para>
</section>

</section>

<section id="userguide-advanced-srcdist">
<title>Source Distributions</title>
 
<para>
  Source distributions of the Inca components are also available.  The 
  following table lists the Inca component source distributions and shows how
  to build each of them.  Note, that <ulink url="http://ant.apache.org">Apache
  Ant</ulink> is needed for the Inca components implemented in Java.  
</para>

  <table><title>Inca component source distributions</title>
  <tgroup cols="2">
  <thead>
    <row>
      <entry><para>Component</para></entry>
      <entry><para>Build</para></entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry><para><ulink url="http://inca.sdsc.edu/releases/&ugVersion/inca-agent-src.tar.gz">agent</ulink></para></entry>
      <entry><para>ant -Dinstalldir=$INCA_DIST install</para></entry>
    </row>
    <row>
      <entry><para><ulink url="http://inca.sdsc.edu/releases/&ugVersion/inca-common-java-src.tar.gz">common</ulink> (used by all Inca Java components)</para></entry>
      <entry><para>ant -Dinstalldir=$INCA_DIST install</para></entry>
    </row>
    <row>
      <entry><para><ulink url="http://inca.sdsc.edu/releases/&ugVersion/inca-consumers-src.tar.gz">consumer</ulink></para></entry>
      <entry><para>ant -Dinstalldir=$INCA_DIST install</para></entry>
    </row>
    <row>
      <entry><para><ulink url="http://inca.sdsc.edu/releases/&ugVersion/inca-depot-src.tar.gz">depot</ulink></para></entry>
      <entry><para>ant -Dinstalldir=$INCA_DIST install</para></entry>
    </row>
    <row>
      <entry><para><ulink url="http://inca.sdsc.edu/releases/&ugVersion/incat-src.tar.gz">incat</ulink></para></entry>
      <entry><para>ant -Dinstalldir=$INCA_DIST install</para></entry>
    </row>
    <row>
      <entry><para><ulink url="http://inca.sdsc.edu/releases/&ugVersion/Inca-Reporter.tar.gz">reporters</ulink></para></entry>
      <entry><para>make &lt;options&gt;</para></entry>
    </row>
    <row>
      <entry><para><ulink url="http://inca.sdsc.edu/releases/&ugVersion/Inca-ReporterManager.tar.gz">reporter manager</ulink></para></entry>
      <entry><para>perl Makefile.PL &lt;options&gt;</para></entry>
    </row>
    <row>
      <entry><para><ulink url="http://inca.sdsc.edu/releases/&ugVersion/Inca-WS.tar.gz">web services</ulink></para></entry>
      <entry><para>perl Makefile.PL &lt;options&gt;</para></entry>
    </row>
  </tbody>
  </tgroup>
  </table>

</section>

</section>
