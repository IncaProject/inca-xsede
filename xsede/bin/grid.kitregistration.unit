#!/usr/bin/env perl

use strict;
use warnings;
use Inca::Reporter::SimpleUnit;

my $reporter = new Inca::Reporter::SimpleUnit(
  name => 'grid.kitregistration.unit',
  version => 2,
  description => 'Tests whether a kit registration exists and meets certain validity constraints.',
  url => 'http://www.globus.org/toolkit/docs/4.0/common/javawscore/rn01re07.html',
  unit_name => 'kit_registration'
);
$reporter->addDependency('Inca::Reporter::GridProxy');
$reporter->addArg('host', 'Hostname (host:port) to query');
$reporter->addArg('kitversion', 'Kit version number for query', '4.0.0');
$reporter->addArg('kitname', 'Kit name number for query', 'core.teragrid.org');
$reporter->processArgv(@ARGV);
my $host = $reporter->argValue('host');
my $version = $reporter->argValue('kitversion');
my $name = $reporter->argValue('kitname');

$ENV{'GLOBUS_OPTIONS'} = "-Xmx256M";
my $service = "https://" . $host . "/wsrf/services/DefaultIndexService";
my $cmd = "wsrf-query -a -s \"$service\" \"//*[local-name()='V4KitsRP']/*//Kit[Name = '$name' and Version = '$version']\"";

my @output = $reporter->loggedCommand ($cmd);
if(!@output || $?) {
  $reporter->unitFailure("wsrf-query failed: $? " . join( "", @output));
} else {
  if(!grep(/<Kit/, @output)){
	  $reporter->unitFailure("wsrf-query returned: @output");
  }else{
    my %kitobj = parseKit(@output);
    my $failures = testKit(%kitobj);
    if ($failures){
      $reporter->unitFailure("Registration contents invalid: $failures\n");
    }else{
      $reporter->unitSuccess();
    }
  }
}
$reporter->print();


# subroutines for kit parsing and testing 
sub testKit {
  my %kitobj = @_;
  my $failures;
  my @installed = ('true', 'false');
  my @support = ('development', 'testing', 'production');
  my $USO = 'TeraGrid';
  my $USContact = 'mailto:help@teragrid.org';

  # grep returns number of matches, no matches == logical true in perl
  if (!grep(/$kitobj{'SupportLevel'}/, @support)){
    $failures .= "SupportLevel listed as $kitobj{'SupportLevel'}, which is invalid\n";
  }
  if (!grep(/$kitobj{'SupportGoal'}/, @support)){
	  $failures .= "SupportGoal listed as $kitobj{'SupportLevel'}, which is invalid\n";
  }
  if (!grep(/$kitobj{'Installed'}/, @installed)){
	  $failures .= "Installed listed as $kitobj{'SupportLevel'}, which is invalid\n";
  }
  if ($kitobj{'UserSupportContact'} ne 'mailto:help@teragrid.org') {
	  $failures .= "UserSupportContact is $kitobj{'UserSupportContact'} instead of mailto:help\@teragrid.org\n";
  }
  if ($kitobj{'UserSupportOrganization'} ne 'TeraGrid') {
	  $failures .= "UserSupportOrganization is $kitobj{'UserSupportOrganization'} when it should be 'TeraGrid'\n";
  }
  return ($failures);
}

sub parseKit {
  my $kit = join(' ', @_);
  $reporter->log('info', 'Kit contents: ' . $kit);
  $kit =~ s/\n//g;
  my %kitobj;

  foreach my $element ('StatusURL', 'Installed', 'Name', 'SupportLevel', 'UserSupportOrganization', 'SupportGoal', 'Version', 'UserSupportContact', 'Description'){
    $kitobj{$element} = parseElement($kit, $element);
  }
  $kitobj{'Services'} = parseServices($kit);
  $kitobj{'Software'} = parseSoftware($kit);
  return %kitobj;
}

sub parseElement {
  my ($rawkit, $element) = @_;
  my $value;
  if ($rawkit =~ m/<$element>(.*?)<\/$element>/) {
    $value = $1;
  }
  return $value;
}

sub parseServices {
  my ($rawkit) = @_;
  my %serviceobj;
  my @services;

  foreach my $service (@services) {
    my %servicehash;
    if ($service =~ m/<Name>(.*)<\/Name>/) {
      $servicehash{'Name'} = $1;
    }
    if ($service =~ m/<Type>(.*)<\/Type>/) {
      $servicehash{'Type'} = $1;
    }
    if ($service =~ m/<Endpoint>(.*)<\/Endpoint>/) {
      $servicehash{'Endpoint'} = $1;
    }
    if ($service =~ m/<Version>(.*)<\/Version>/) {
      $servicehash{'Version'} = $1;
    }
    $serviceobj{$servicehash{'Name'}} = \%servicehash;
  }
  return \%serviceobj;
}

sub parseSoftware {
  my ($rawkit) = @_;
  my %softobj;
  my @software;

  foreach my $soft (@software) {
    my %softhash;
    if ($soft =~ m/<Name>(.*)<\/Name>/) {
      $softhash{'Name'} = $1;
    }
    if ($soft =~ m/<Default>(.*)<\/Default>/) {
      $softhash{'Type'} = $1;
    }
    if ($soft =~ m/<HandleType>(.*)<\/HandleType>/) {
      $softhash{'HandleType'} = $1;
    }
    if ($soft =~ m/<HandleKey>(.*)<\/HandleKey>/) {
      $softhash{'HandleKey'} = $1;
    }
    if ($soft =~ m/<Version>(.*)<\/Version>/) {
      $softhash{'Version'} = $1;
    }
    $softobj{$softhash{'Name'}} = \%softhash;
  }
  return \%softobj;
}
