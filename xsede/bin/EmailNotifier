#! /usr/bin/perl -w

################################################################################

=head1 NAME

EmailNotifier -- an Inca Depot notifier that sends email

=head1 SYNOPSIS

  perl EmailNotifier target [...]

=head1 DESCRIPTION

  This is an Inca Depot notifier that uses either sendmail or mailx to send
  email to one or more addresses when the results of a series comparison
  change.  Each target argument to the script is an email address, optionally
  preceded by a "Pass:" or "Fail:" prefix.  Those addresses with a prefix only
  receive emails for passing or failing comparisons; those with no prefix
  receive both.  The format of the email subject and body can be modified by
  changing the values of the $subject and $body variables defined below.

=cut

################################################################################

use strict;
use warnings;
use Date::Manip;

exit if scalar(@ARGV) < 1;

my $err = $ENV{incaerrorMessage};
my $noemail = defined($err) && $err =~ /(^DOWNTIME:|Inca error|^NOT_AT_FAULT:)/;

if (!$noemail){
  my $name = $ENV{incanickname} || $ENV{incareporter};
  my $subject =
  "Inca TeraGrid Notification: $name on $ENV{incaresource} $ENV{incaresult}";
  my $body =
  "The following Inca test has $ENV{incaresult}ED:\n\n" .
  "RAN AT:  $ENV{incacollected}\n\n" .
  "RAN ON:  $ENV{incahostname}\n\n" .
  "TEST:  $ENV{incareporter}\n\n" .
  "INPUT PARAMETERS:  $ENV{incaargs}\n\n" .
  (defined($ENV{incalog}) ? "LOGGED COMMANDS: $ENV{incalog}\n\n" : "") .
  (defined($err) ?  "ERROR MESSAGE: $err\n\n" : '') .
  (defined($ENV{incastderr}) ? "STANDARD ERROR: $ENV{incastderr}\n\n" : "") .
  "\n\n" .
  "details at http://sapa.sdsc.edu:8080/inca/jsp/instance.jsp?xsl=instance.xsl" .
  "&instanceId=$ENV{incainstanceId}&configId=$ENV{incaconfigId}\n\n";

  my $baseDateString = "Tue Feb 19 10:00:00 PST 2008";
  my $baseDate = ParseDate( $baseDateString );
  my $date = ParseDate( $ENV{incacollected} );
  if ( Date_Cmp($date, $baseDate) < 0 ) {
    `date >> email.log`;
    `echo "Ignoring old report $ENV{incacollected}" >> email.log`;
    exit 0;
  }

  my $mailPath = "/usr/sbin/sendmail"; # or my $mailPath = `which mailx`;
  my $subjectPrefix = 'Subject:'; # or my $subjectPrefix = '~s';
 
  my $failed = defined($ENV{incacomparisonResult}) &&
             $ENV{incacomparisonResult} =~ /^Failure/;
  my @emails = @ARGV;
  if ($emails[0] eq "externalEmail"){
    @emails = getExternalEmail($name);
  }
  foreach my $email(split(/[\s,;]+/, join(' ', @emails))) {
    my @pieces = split(/:/, $email);
    my $to = $pieces[$#pieces];
    if(scalar(@pieces) == 1 || ($failed && $pieces[0] =~ /^Fail/) ||
     (!$failed && $pieces[0] !~ /^Fail/)) {
      if ($to eq "help\@teragrid.org"){
        $subject = "Inca TeraGrid Notification: $name $ENV{incaresult}";
        my $assign = getHelpAssignment($name);
        my $newbody = "Ticket assignment group: $assign\n\n$body";
        $body = $newbody;
        `date >> email.log`;
        `echo "Sending email for $name to $to ($subject)\n$body" >> email.log`;
        }
      open(MAIL, "|$mailPath $to");
      print MAIL "$subjectPrefix$subject\n";
      print MAIL "To:$to\n" if $mailPath =~ /sendmail/;
      print MAIL $body;
      close(MAIL);
    }
  }
}else{
  #`date >> email.log`;
  #`echo "No email for $ENV{incanickname} report with error: $err (instance: $ENV{incainstanceId}, config: $ENV{incaconfigId})" >> email.log`;
  exit 0;
}

sub getExternalEmail {
  my $name = shift;
  my %map = ( 
    "\.uc\.teragrid\.org" => "FailTo:leggett\@mcs.anl.gov",
    "\.bigred\." => "FailTo:jomlowe\@iupui.edu, FailTo:jtillots\@indiana.edu",
    "qb1\.loni" => "FailTo:TG-Inca-Alerts\@loni.org",
    "frost\.ncar" => "FailTo:paul.marshall\@colorado.edu, FailTo:oberg\@ucar.edu",
    "(abe|-w)\.ncsa" => "FailTo:abe-admin\@ncsa.uiuc.edu",
    "-co\.ncsa" => "FailTo:co-admin\@ncsa.uiuc.edu",
    "\.nics\." => "FailTo:admin-core\@nics.utk.edu",
    "ornl\." => "FailTo:gilesdc\@ornl.gov, FailTo:cobbjw\@ornl.gov",
    "\.psc\." => "FailTo:rbudden\@psc.edu",
    "\.purdue\." => "FailTo:psmith\@purdue.edu",
    "\.sdsc\." => "FailTo:diegella\@sdsc.edu, FailTo:kenneth\@sdsc.edu",
    "(ranger|spur\.tacc|longhorn)" => "FailTo:dcarver\@tacc.utexas.edu",
    "lonestar" => "FailTo:dcarver\@tacc.utexas.edu, FailTo:timm\@tacc.utexas.edu",
    "ranch" => "FailTo:ctjordan\@tacc.utexas.edu, FailTo:jones\@tacc.utexas.edu",
    "(maverick|tg-viz-login\.tacc)" => "FailTo:dcarver\@tacc.utexas.edu, FailTo:dgignac\@tacc.utexas.edu"
  );    
  my @notify = ("FailTo:inca\@sdsc.edu");
  for my $host ( keys %map ) {
    my $adminEmail = $map{$host};
    if ($name =~ /-external-.*_.*$host/){
      push (@notify, $adminEmail);
    }
  }
  my @stu = ("gridftp-external-ping-dm-4.1.2", "gridftp-striped-external-telnet-dm-4.1.2", "gridftp-nonstriped-external-telnet-dm-4.1.2", "wsgram-external-telnet-rc-4.0.2");
  if (grep(/$name/, @stu)){
    push (@notify, "FailTo:smartin\@mcs.anl.gov");
  }
  my $notify = join(", ", @notify);
  #`date >> email.log`;
  #`echo "Sending email for $name to $notify (instance: $ENV{incainstanceId}, config: $ENV{incaconfigId})" >> email.log`;
  return @notify;
}

sub getHelpAssignment{
  my $name = shift;
  my %map = ( 
    "hostcert-check-" => "RP RESOURCE ADMIN",
    "ca-crl-check-" => "If expired, contact the appropriate CA at http://security.teragrid.org/TG-CAs.html.  Otherwise assign to RP RESOURCE ADMIN",
    "TGCDB_connect" => "TGCDB",
    "myproxy_unit" => "TG GIG SERVICES",
    "info.teragrid.org" => "TG GIG SERVICES"
  );    
  my $assign = "";
  for my $test ( keys %map ) {
    my $group = $map{$test};
    if ($name =~ /^$test.*/){
      $assign = $group;
    }
  }
  return $assign;
}
